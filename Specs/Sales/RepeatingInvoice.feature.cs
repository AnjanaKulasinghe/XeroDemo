// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace XeroDemo.Specs.Sales
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RepeatingInvoice")]
    public partial class RepeatingInvoiceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RepeatingInvoice.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RepeatingInvoice", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Basic Flow - Page Load Verification")]
        [NUnit.Framework.CategoryAttribute("BVT")]
        [NUnit.Framework.CategoryAttribute("Sales")]
        public virtual void BasicFlow_PageLoadVerification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Basic Flow - Page Load Verification", new string[] {
                        "BVT",
                        "Sales"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I login to the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I navigate to Repeating Invoice Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("I should see Repeating Invoice page with correct content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Basic Flow - Successful Repeating Invoice")]
        [NUnit.Framework.CategoryAttribute("BVT")]
        [NUnit.Framework.CategoryAttribute("Sales")]
        public virtual void BasicFlow_SuccessfulRepeatingInvoice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Basic Flow - Successful Repeating Invoice", new string[] {
                        "BVT",
                        "Sales"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I\'m on Repeating Invoice Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.When("I place a successfull Repeating Invoice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("I should see the confirmation message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Exception Flow - Repeating invoice without an Item")]
        [NUnit.Framework.CategoryAttribute("Exception")]
        [NUnit.Framework.CategoryAttribute("SmokePack")]
        [NUnit.Framework.CategoryAttribute("Sales")]
        [NUnit.Framework.TestCaseAttribute("DueDate", "Due Date cannot be empty", null)]
        [NUnit.Framework.TestCaseAttribute("ActionStatus", "Please select how you wish this invoice to be treated.", null)]
        [NUnit.Framework.TestCaseAttribute("InvoiceTo", "Invoice to cannot be empty.", null)]
        [NUnit.Framework.TestCaseAttribute("Item", "Description cannot be empty.", null)]
        public virtual void ExceptionFlow_RepeatingInvoiceWithoutAnItem(string missingItem, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Exception",
                    "SmokePack",
                    "Sales"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Exception Flow - Repeating invoice without an Item", @__tags);
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("I\'m on Repeating Invoice Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
 testRunner.When(string.Format("I place a Repeating Invoice without \'{0}\'", missingItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then(string.Format("I should see the \'{0}\' message", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
